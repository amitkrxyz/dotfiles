# Set programs that you use
$terminal = kitty -1
$fileManager = nautilus

# See https://wiki.hyprland.org/Configuring/Keywords/ for more
$mainMod = SUPER

# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = $mainMod, T, exec, $terminal
bind = $mainMod, Q, killactive, 
bind = $mainMod SHIFT , M, exec, ~/.local/scripts/confirm-wofi.sh "hyprctl dispatch exit" 
bind = $mainMod, F, exec, $fileManager
bind = $mainMod, B, exec, gtk-launch brave-browser
bind = $mainMod, G, togglefloating, 
bind = $mainMod, R, exec, pkill wofi || wofi
bind = $mainMod, A, exec, nwg-drawer
bind = $mainMod, O, togglesplit, # dwindle
bindr = $mainMod SHIFT, Escape, exec, hyprctl kill
bind = $mainMod, P, exec, hyprctl dispatch pin
bind = $mainMod, D, exec, ~/.local/scripts/run-scripts.sh
bind = $mainMod, N, exec, dunstctl context
bind = $mainMod SHIFT, N, exec, dunstctl close
bind = $mainMod ALT, N, exec, dunstctl history | jq -r .data.[].[].summary.data | wofi --dmenu | wl-copy
bind = $mainMod, PERIOD, exec, cat ~/dotfiles/emojis.csv | wofi --dmenu | cut -f1 -d, | wl-copy
bind = $mainMod SHIFT, V, exec, clipman pick -t wofi --err-on-no-selection  && ydotool key 29:1 47:1 29:0 47:0

bind =, Print, exec, grim -g "$(slurp)" - | wl-copy && wl-paste > ~/Pictures/Screenshots/Screenshot-$(date +%F_%T).png | dunstify "Screenshot of the region taken" -t 2000 # screenshot of a region 
bind = SHIFT, Print, exec, grim - | wl-copy && wl-paste > ~/Pictures/Screenshots/Screenshot-$(date +%F_%T).png | dunstify "Screenshot of whole screen taken" -t 2000 # screenshot of the whole screen

bind = $mainMod, S, togglegroup
bind = $mainMod, F11, fullscreen, 2
bind = $mainMod, M, fullscreen, 1
# TODO: Add workaround # bind = ALT, F11, fakefullscreen

# Ctrl Alt Delete wlogout
bind = CTRL_ALT, Delete, exec, pkill wlogout || wlogout

bind = $mainMod ALT, h, changegroupactive, f
bind = $mainMod ALT, l, changegroupactive, b

# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

bind = $mainMod, left, changegroupactive, f
bind = $mainMod, right, changegroupactive, b

# Move focus with mainMod + arrow keys (vim)
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Super + Tab to cycle between workspaces
bind = $mainMod,TAB,workspace,previous
bind = $mainMod SHIFT,TAB,workspace,next

# Alt tab cylcle betwen windows
bind = ALT, TAB, cyclenext
bind = ALT, TAB, bringactivetotop


# Switch workspaces left and right
bind = $mainMod_CTRL, L, workspace, e+1
bind = $mainMod_CTRL, H, workspace, e-1
bind = $mainMod_CTRL, right, workspace, +1
bind = $mainMod_CTRL, left, workspace, -1

# move window to workspaces left and right
bind = $mainMod_SHIFT, L, movetoworkspace, +1
bind = $mainMod_SHIFT, H, movetoworkspace, -1
bind = $mainMod_SHIFT, right, movetoworkspace, +1
bind = $mainMod_SHIFT, left, movetoworkspace, -1


# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, empty

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, code:49, togglespecialworkspace, magic
bind = $mainMod SHIFT, code:49, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, -1
bind = $mainMod, mouse_up, workspace, +1

# dpms toggle
bindl = $mainMod, Z, exec, ~/.local/scripts/toggle-dpms.sh

# power button
bind = , XF86PowerOff, exec, ~/.local/scripts/toggle-dpms.sh

# toggle waybar
bind = $mainMod ALT, B, exec, pkill waybar || waybar

# Brightness keys
bindle = ,XF86MonBrightnessDown, exec, brightnessctl set 5%- && dunstify --replace=11111 --timeout=500 --icon=display-brightness --hints=int:value:"$(brightnessctl get | awk '{printf "%.0f\n", $1 * 100 / 255}')" "Brightness"
bindle = ,XF86MonBrightnessUp, exec, brightnessctl set +5% && dunstify --replace=11111 --timeout=500 --icon=display-brightness --hints=int:value:"$(brightnessctl get | awk '{printf "%.0f\n", $1 * 100 / 255}')" "Brightness" 

# Volume keys
bind = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
binde=, XF86AudioRaiseVolume, exec, wpctl set-volume -l 1.0 @DEFAULT_AUDIO_SINK@ 5%+ && printf "%.0f\n" $(echo "$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{ print $2 }') * 100" | bc) > /tmp/wobpipe
binde=, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- && printf "%.0f\n" $(echo "$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{ print $2 }') * 100" | bc) > /tmp/wobpipe

# Player keys
bindl=, XF86AudioPlay, exec, playerctl play-pause
bindl=, XF86AudioNext, exec, playerctl next
bindl=, XF86AudioPrev, exec, playerctl previous

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
bindm = $mainMod SHIFT, mouse:272, resizewindow

bind = $mainMod ALT, mouse_down, exec, current=$(hyprctl getoption cursor:zoom_factor | head -n 1 | awk '{print $2;}') && hyprctl keyword cursor:zoom_factor $(echo "$current + 0.5"|bc)

bind = $mainMod ALT, mouse_up, exec, hyprctl keyword cursor:zoom_factor 1

#bind = $mainMod SHIFT, mouse_up, exec, hyprctl keyword cursor:zoom_factor 1

# Kando Menu
windowrule = noblur, kando 
windowrule = size 100% 100%, kando
windowrule = noborder, kando
windowrule = noanim, kando
windowrule = float, kando
windowrule = pin, kando
bindr = SUPER, Alt_L , global, kando:example-menu
# bind = ,mouse:274, global, kando:example-menu

# bindr = SUPER, SUPER_L , exec, wofi


# trigger when the switch is toggled
# bindl=,switch:[switch name],exec,swaylock
# trigger when the switch is turning on
bindl=,switch:on:Lid Switch,exec, hyprctl dispatch dpms off eDP-1
# trigger when the switch is turning off
bindl=,switch:off:Lid Switch,exec, hyprctl dispatch dpms on eDP-1


# will start a submap called "resize"
bind = $mainMod, Return, submap, EditWindow
submap = EditWindow

binde = SHIFT, l, resizeactive, 50 0
binde = SHIFT, h, resizeactive, -50 0
binde = SHIFT, k, resizeactive, 0 -40
binde = SHIFT, j, resizeactive, 0 40

bind = CTRL, l, movewindow, r
bind = CTRL, h, movewindow, l
bind = CTRL, k, movewindow, u
bind = CTRL, j, movewindow, d

bind = , l, movefocus, r
bind = , h, movefocus, l
bind = , j, movefocus, d
bind = , k, movefocus, u

bind = , o, togglesplit
binde = , v, togglefloating

# reset
bind = , escape, submap, reset 
bind = , return, submap, reset
# will reset the submap, meaning end the current one and return to the global one
submap = reset
